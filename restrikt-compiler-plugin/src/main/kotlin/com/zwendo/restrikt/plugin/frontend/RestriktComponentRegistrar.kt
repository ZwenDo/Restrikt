package com.zwendo.restrikt.plugin.frontend

import com.zwendo.restrikt.plugin.backend.RestriktClassBuilder
import org.jetbrains.kotlin.codegen.ClassBuilder
import org.jetbrains.kotlin.codegen.ClassBuilderFactory
import org.jetbrains.kotlin.codegen.extensions.ClassBuilderInterceptorExtension
import org.jetbrains.kotlin.com.intellij.mock.MockProject
import org.jetbrains.kotlin.compiler.plugin.ComponentRegistrar
import org.jetbrains.kotlin.config.CompilerConfiguration
import org.jetbrains.kotlin.diagnostics.DiagnosticSink
import org.jetbrains.kotlin.resolve.BindingContext
import org.jetbrains.kotlin.resolve.jvm.diagnostics.JvmDeclarationOrigin

/**
 * Class that registers plugin custom class generation interceptor
 */
internal class RestriktComponentRegistrar : ComponentRegistrar {

    override fun registerProjectComponents(project: MockProject, configuration: CompilerConfiguration) {
        if (configuration[EnabledOption.key] == false) return // return if not enabled

        val interceptor = ClassGenerationInterceptor()
        ClassBuilderInterceptorExtension.registerExtension(project, interceptor)
    }

}

/**
 * Class that intercepts bytecode generation and adds custom code to it
 */
private class ClassGenerationInterceptor : ClassBuilderInterceptorExtension {

    /**
     * Methods that provides a factory for class builders (class builder is the class that will parse the kotlinc
     * generated bytecode and add custom code to it).
     */
    override fun interceptClassBuilderFactory(
        interceptedFactory: ClassBuilderFactory,
        bindingContext: BindingContext,
        diagnostics: DiagnosticSink,
    ): ClassBuilderFactory = object : ClassBuilderFactory by interceptedFactory {

        /**
         * Methods that return the class builder for the given class.
         */
        override fun newClassBuilder(origin: JvmDeclarationOrigin): ClassBuilder = RestriktClassBuilder(
            interceptedFactory.newClassBuilder(origin)
        )
    }

}
